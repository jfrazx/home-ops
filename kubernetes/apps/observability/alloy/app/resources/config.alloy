// Alloy Configuration - Complete Log Collection

logging {
  level    = "warn"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

/********************************************
 * SERVICE DISCOVERY
 ********************************************/

discovery.kubernetes "pod" {
  role = "pod"
}

discovery.kubernetes "service" {
  role = "service"
}

/********************************************
 * LOG COLLECTION - POD LOGS
 ********************************************/

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  // Drop rook-ceph namespace logs (too noisy)
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    regex = "rook-ceph"
    action = "drop"
  }

  // Create namespace label
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Create node label
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "node_name"
  }

  // Create pod label
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Create container label
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Create app label (try multiple sources)
  rule {
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_name",
      "__meta_kubernetes_pod_label_app",
      "__meta_kubernetes_pod_controller_name",
    ]
    regex = "^;*([^;]+)(;.*)?$"
    action = "replace"
    target_label = "app"
  }

  // Create instance label
  rule {
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_instance",
      "__meta_kubernetes_pod_label_instance",
    ]
    regex = "^;*([^;]+)(;.*)?$"
    action = "replace"
    target_label = "instance"
  }

  // Create component label
  rule {
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_component",
      "__meta_kubernetes_pod_label_component",
    ]
    regex = "^;*([^;]+)(;.*)?$"
    action = "replace"
    target_label = "component"
  }

  // Create job label (namespace/app format)
  rule {
    source_labels = ["namespace", "app"]
    action = "replace"
    target_label = "job"
    separator = "/"
  }

  // Set log file path
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Extract container runtime
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  // Add cluster identifier
  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  forward_to = [loki.write.default.receiver]
}

/********************************************
 * LOG COLLECTION - KUBERNETES EVENTS
 ********************************************/

loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [loki.process.cluster_events.receiver]
}

loki.process "cluster_events" {
  forward_to = [loki.write.default.receiver]

  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }
}

/********************************************
 * LOKI OUTPUT
 ********************************************/

loki.write "default" {
  endpoint {
    url = "http://loki-distributed-gateway.observability.svc.cluster.local/loki/api/v1/push"
    tenant_id = "1"

    // Optimize batching for better performance
    max_backoff_period   = "5m"
    min_backoff_period   = "500ms"
    max_backoff_retries  = 10
  }
}
